package cn.com.cdboost.charge.customer.dubbo.impl;

import cn.com.cdboost.charge.base.exception.BusinessException;
import cn.com.cdboost.charge.base.util.MathUtil;
import cn.com.cdboost.charge.base.util.RedissonLockUtil;
import cn.com.cdboost.charge.base.util.UuidUtil;
import cn.com.cdboost.charge.customer.config.SystemConfig;
import cn.com.cdboost.charge.customer.constant.CustomerConstant;
import cn.com.cdboost.charge.customer.dubbo.RefundService;
import cn.com.cdboost.charge.customer.model.*;
import cn.com.cdboost.charge.customer.service.*;
import cn.com.cdboost.charge.customer.vo.param.RefundParam;
import cn.com.cdboost.charge.customer.vo.param.RefundVo;
import cn.com.cdboost.charge.merchant.constant.MerchantConstant;
import cn.com.cdboost.charge.merchant.constant.SchemeConstant;
import cn.com.cdboost.charge.payment.dubbo.AlipayService;
import cn.com.cdboost.charge.payment.dubbo.WechatService;
import cn.com.cdboost.charge.payment.vo.info.WxRefundInfo;
import cn.com.cdboost.charge.payment.vo.info.ZfbRefundInfo;
import cn.com.cdboost.charge.payment.vo.param.WxRefundApplyParam;
import cn.com.cdboost.charge.payment.vo.param.ZfbRefundParam;
import cn.com.cdboost.charge.settlement.dubbo.AccountService;
import cn.com.cdboost.charge.settlement.vo.param.ConfirmRefundVo;
import com.alibaba.dubbo.config.annotation.Reference;
import com.alibaba.dubbo.config.annotation.Service;
import com.alibaba.fastjson.JSON;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.CollectionUtils;

import javax.annotation.Resource;
import java.math.BigDecimal;
import java.util.Date;
import java.util.List;
import java.util.Map;

/**
 * 退款服务实现类
 */
@Slf4j
@Service(version = "1.0",retries = -1,timeout = 5000)
public class RefundServiceImpl implements RefundService {
    // 微信退款回调地址
    private static final String REFUND_NOTIFY = "/notify/wxRefundNotify";

    @Reference(version = "1.0")
    private AccountService accountService;
    @Reference(version = "1.0")
    private WechatService wechatService;
    @Reference(version = "1.0")
    private AlipayService alipayService;
    @Resource
    private SystemConfig systemConfig;
    @Resource
    private IDeviceUseDetailedService iDeviceUseDetailedService;
    @Resource
    private IDeviceUsePayRelationService iDeviceUsePayRelationService;
    @Resource
    private ICustomerPayService iCustomerPayService;
    @Resource
    private ICustomerRefundService iCustomerRefundService;
    @Resource
    private IMerchantWxConfigService iMerchantWxConfigService;
    @Resource
    private IMerchantZfbConfigService iMerchantZfbConfigService;


    @Override
    public void refundApply(RefundVo refundVo) {
        log.info("退款申请入参RefundVo={}", JSON.toJSONString(refundVo));
        String chargingGuid = refundVo.getChargingGuid();
        // 加锁
        String key = "customer:refund" + chargingGuid;
        RedissonLockUtil.tryLock(key);
        try {
            DeviceUseDetailed useDetailed = iDeviceUseDetailedService.queryChargeOrder(chargingGuid);
            if (useDetailed == null) {
                // 非系统订单
                throw new BusinessException("系统订单号错误");
            }

            Integer refundState = useDetailed.getRefundState();
            if (CustomerConstant.DeviceRefundState.REFUND_FINISH.getState().equals(refundState)) {
                // 已退款订单不能退款
                throw new BusinessException("已退款订单不能退款");
            }

            Integer payCategory = useDetailed.getPayCategory();
            if (SchemeConstant.SchemePayCategory.MONTH_RECHARGE.getType().equals(payCategory)) {
                // 月卡开电不支持退款
                throw new BusinessException("月卡开电不支持退款");
            } else if (SchemeConstant.SchemePayCategory.IC_RECHARGE.getType().equals(payCategory)) {
                throw new BusinessException("IC卡开电不支持退款");
            }

            Integer serviceMode = 1;
            if (MerchantConstant.ServiceMode.COMMON_MERCHANT.equals(serviceMode)) {
                this.commomMerchantRefund(refundVo,useDetailed);
            } else {
                this.serviceMerchantRefund(refundVo,useDetailed);
            }
        } catch (Exception e) {
            // 释放锁
            RedissonLockUtil.unlock(key);
        }
    }

    private void commomMerchantRefund(RefundVo refundVo,DeviceUseDetailed useDetailed) {
        ConfirmRefundVo confirmRefundVo = new ConfirmRefundVo();
        confirmRefundVo.setUserGuid(useDetailed.getCustomerGuid());
        confirmRefundVo.setDataGuid(useDetailed.getChargingGuid());
        accountService.confirmRefund(confirmRefundVo);
    }

    private void serviceMerchantRefund(RefundVo refundVo,DeviceUseDetailed useDetailed) {
        String chargingGuid = useDetailed.getChargingGuid();
        List<DeviceUsePayRelation> usePayRelations = iDeviceUsePayRelationService.queryCanRefundList(chargingGuid);
        if (CollectionUtils.isEmpty(usePayRelations)) {
            log.info("未查询到可退款订单信息");
            throw new BusinessException("未查询到可退款订单信息");
        }

        // 计算每笔订单已经退款金额
        Map<String,BigDecimal> refundMap = Maps.newHashMap();
        List<CustomerRefund> refunds = iCustomerRefundService.queryRefundSuccessList(chargingGuid);
        if (!CollectionUtils.isEmpty(refunds)) {
            for (CustomerRefund refund : refunds) {
                String tradeNo = refund.getTradeNo();
                if (refundMap.containsKey(tradeNo)) {
                    BigDecimal temp = refundMap.get(tradeNo);
                    BigDecimal add = temp.add(refund.getRefundAmount());
                    refundMap.put(tradeNo,add);
                } else {
                    refundMap.put(tradeNo,refund.getRefundAmount());
                }
            }
        }

        Map<String,DeviceUsePayRelation> relationMap = Maps.newHashMap();
        // 计算每笔订单本次退款金额
        Map<String,BigDecimal> map = Maps.newHashMap();
        BigDecimal total = refundVo.getRefundAmount();
        for (DeviceUsePayRelation usePayRelation : usePayRelations) {
            String payFlag = usePayRelation.getPayFlag();
            relationMap.put(payFlag,usePayRelation);

            // 该笔订单已退款金额
            BigDecimal temp = refundMap.get(payFlag);
            if (temp != null) {
                // 判断该笔订单是否已经全额退款过
                boolean equal = MathUtil.isEqual(usePayRelation.getPayMoney(), temp);
                if (equal) {
                    continue;
                }
            }

            // 订单实际还可以退款金额
            BigDecimal amount = usePayRelation.getPayMoney().subtract(temp);
            // 判断该订单能否退完本次退款
            BigDecimal result = amount.subtract(total);
            boolean lessThanZero = MathUtil.isLessThanZero(result);
            if (lessThanZero) {
                total = total.subtract(amount);
                map.put(usePayRelation.getPayFlag(),amount);
            } else {
                map.put(usePayRelation.getPayFlag(),total);
                break;
            }
        }

//        for (Map.Entry<String, BigDecimal> entry : map.entrySet()) {
//            String payFlag = entry.getKey();
//            BigDecimal refundAmount = entry.getValue();
//            DeviceUsePayRelation usePayRelation = relationMap.get(payFlag);
//            // 调用退款接口
//            RefundParam param = new RefundParam();
//            param.setOrgNo(project.getOrgNo());
//            param.setCustomerGuid(useDetailed.getCustomerGuid());
//            param.setChargingGuid(chargingGuid);
//            param.setTradeNo(payFlag);
//            param.setRefundMoney(refundAmount);
//            param.setTotalMoney(usePayRelation.getPayMoney());
//            param.setRemark("充电结束部分退款");
//            appChargerService.refund(param);
//        }
//
//        // 更新使用记录
//        useDetailed.setProfitable(profitable);
//        useDetailed.setRefundMoney(refundMoney);
//        useDetailed.setRefundState(1);
//        iDeviceUseDetailedService.updateByPrimaryKeySelective(useDetailed);
    }

    @Override
    @Transactional
    public void cancelPayRefund(String chargingGuid, String signGuid) {
        log.info("取消支付退款chargingGuid={},signGuid={}",chargingGuid,signGuid);
        List<DeviceUsePayRelation> usePayRelations = iDeviceUsePayRelationService.queryByParams(chargingGuid, signGuid);
        List<String> payFlagList = Lists.newArrayList();
        for (DeviceUsePayRelation usePayRelation : usePayRelations) {
            String payFlag = usePayRelation.getPayFlag();
            payFlagList.add(payFlag);
        }

        // 批量查询充值记录
        List<CustomerPay> customerPays = iCustomerPayService.batchQuery(payFlagList);
        for (CustomerPay customerPay : customerPays) {
            Integer payState = customerPay.getPayState();
            if (CustomerConstant.PayState.WAIT_PAY.getState().equals(payState)) {
                // 未支付成功的，直接排除
                continue;
            }

            Integer payWay = customerPay.getPayWay();
            if (CustomerConstant.PayWayConstant.WECHAT.getType().equals(payWay)) {
                // 微信退款
                RefundParam param = new RefundParam();
                param.setMerchantGuid(customerPay.getMerchantGuid());
                param.setCustomerGuid(customerPay.getCustomerGuid());
                param.setChargingGuid(chargingGuid);
                param.setSignGuid(signGuid);
                param.setTradeNo(customerPay.getPayFlag());
                param.setTotalMoney(customerPay.getPayMoney());
                param.setRefundMoney(customerPay.getPayMoney());
                param.setRefundCategory(0);
                param.setRemark("开电失败资金原路退回");
                this.wxRefund(param);
            } else if (CustomerConstant.PayWayConstant.ALIPAY.getType().equals(payWay)) {
                // 支付宝退款
                RefundParam param = new RefundParam();
                param.setMerchantGuid(customerPay.getMerchantGuid());
                param.setCustomerGuid(customerPay.getCustomerGuid());
                param.setChargingGuid(chargingGuid);
                param.setSignGuid(signGuid);
                param.setTradeNo(customerPay.getPayFlag());
                param.setTotalMoney(customerPay.getPayMoney());
                param.setRefundMoney(customerPay.getPayMoney());
                param.setRefundCategory(0);
                param.setRemark("开电失败资金原路退回");
                this.zfbRefund(param);
            } else if (CustomerConstant.PayWayConstant.BALANCE.getType().equals(payWay)) {
                // 余额退款
                log.info("余额退款开始");
                ConfirmRefundVo refundVo = new ConfirmRefundVo();
                refundVo.setUserGuid(customerPay.getCustomerGuid());
                refundVo.setDataGuid(chargingGuid);
                refundVo.setSignGuid(signGuid);
                accountService.refundBalance(refundVo);
            }
        }
    }


    /**
     * 微信退款逻辑
     * @param refundParam
     */
    private void wxRefund(RefundParam refundParam) {
        log.info("微信退款开始RefundParam={}",JSON.toJSONString(refundParam));
        // 新增退款申请记录
        CustomerRefund refund = new CustomerRefund();
        refund.setCustomerGuid(refundParam.getCustomerGuid());
        refund.setRefundType(CustomerConstant.RefundType.WECHAT.getType());
        refund.setChargingGuid(refundParam.getChargingGuid());
        String tradeNo = refundParam.getTradeNo();
        refund.setTradeNo(tradeNo);
        // 退款单号
        String refundNo = UuidUtil.getUuid();
        refund.setRefundNo(refundNo);
        BigDecimal refundMoney = refundParam.getRefundMoney();
        refund.setRefundAmount(refundMoney);
        refund.setRefundCategory(refundParam.getRefundCategory());
        refund.setRefundState(CustomerConstant.RefundState.PROCESSING.getState());
        String remark = refundParam.getRemark();
        refund.setRemark(remark);
        refund.setCreateTime(new Date());
        refund.setOperateUserId(refundParam.getOperateUserId());
        iCustomerRefundService.insertSelective(refund);

        // 查询子商户号
        MerchantWxConfig wxConfig = iMerchantWxConfigService.queryByMerchantGuid(refundParam.getMerchantGuid());

        // 发起微信退款申请
        WxRefundApplyParam refundApplyParam = new WxRefundApplyParam();
        if (wxConfig != null) {
            String subAppid = wxConfig.getSubAppid();
            if (StringUtils.isNotBlank(subAppid)) {
                refundApplyParam.setSubAppId(subAppid);
            }

            String subMchId = wxConfig.getSubMchId();
            refundApplyParam.setSubMchId(subMchId);
        }
        refundApplyParam.setOutTradeNo(tradeNo);
        refundApplyParam.setOutRefundNo(refundNo);
        Integer totalFee = MathUtil.yuan2Fen(String.valueOf(refundParam.getTotalMoney()));
        refundApplyParam.setTotalFee(totalFee);
        Integer refundFee = MathUtil.yuan2Fen(String.valueOf(refundParam.getRefundMoney()));
        refundApplyParam.setRefundFee(refundFee);
        refundApplyParam.setRefundDesc(remark);
        String notifyUrl = systemConfig.getDomain() + REFUND_NOTIFY;
        log.info("退款结果通知地址notifyUrl={}",notifyUrl);
        refundApplyParam.setNotifyUrl(notifyUrl);
        WxRefundInfo refundInfo = wechatService.refundApply(refundApplyParam);
        Integer code = refundInfo.getCode();
        if (code == 0) {
            // 退款申请发送失败
            refund.setRefundState(CustomerConstant.RefundState.FAIL.getState());
            refund.setErrorCode(refundInfo.getErrorCode());
            refund.setErrorDesc(refundInfo.getErrorMsg());
            refund.setUpdateTime(new Date());
            iCustomerRefundService.updateByPrimaryKeySelective(refund);
        }
    }

    /**
     * 支付宝退款
     * @param refundParam
     */
    private void zfbRefund(RefundParam refundParam) {
        log.info("支付宝退款开始RefundParam={}",JSON.toJSONString(refundParam));
        // 新增退款申请记录
        CustomerRefund refund = new CustomerRefund();
        String customerGuid = refundParam.getCustomerGuid();
        refund.setCustomerGuid(customerGuid);
        refund.setRefundType(CustomerConstant.RefundType.ALIPAY.getType());
        String chargingGuid = refundParam.getChargingGuid();
        refund.setChargingGuid(chargingGuid);
        String tradeNo = refundParam.getTradeNo();
        refund.setTradeNo(tradeNo);
        // 退款单号
        String refundNo = UuidUtil.getUuid();
        refund.setRefundNo(refundNo);
        BigDecimal refundMoney = refundParam.getRefundMoney();
        refund.setRefundAmount(refundMoney);
        refund.setRefundCategory(refundParam.getRefundCategory());
        refund.setRefundState(CustomerConstant.RefundState.PROCESSING.getState());
        String remark = refundParam.getRemark();
        refund.setRemark(remark);
        refund.setCreateTime(new Date());
        refund.setOperateUserId(refundParam.getOperateUserId());
        iCustomerRefundService.insertSelective(refund);

        // 查询子商户号
        MerchantZfbConfig zfbConfig = iMerchantZfbConfigService.queryByMerchantGuid(refundParam.getMerchantGuid());

        // 发起支付宝退款
        ZfbRefundParam zfbRefundParam = new ZfbRefundParam();
        if (zfbConfig != null) {
            zfbRefundParam.setAppAuthToken(zfbConfig.getAppAuthToken());
        }
        zfbRefundParam.setOutTradeNo(tradeNo);
        zfbRefundParam.setRefundAmount(refundMoney);
        zfbRefundParam.setRefundReason(refundParam.getRemark());
        zfbRefundParam.setRefundNo(refundNo);
        ZfbRefundInfo refundInfo = alipayService.refund(zfbRefundParam);
        Integer code = refundInfo.getCode();
        if (code == 0) {
            // 退款失败
            refund.setRefundState(CustomerConstant.RefundState.FAIL.getState());
            refund.setErrorCode(refundInfo.getSubCode());
            refund.setErrorDesc(refundInfo.getSubMsg());
            refund.setUpdateTime(new Date());
            iCustomerRefundService.updateByPrimaryKeySelective(refund);
        } else {
            // 退款成功
            // 更新退款记录状态
            refund.setRefundState(CustomerConstant.RefundState.SUCCESS.getState());
            refund.setUpdateTime(new Date());
            iCustomerRefundService.updateByPrimaryKeySelective(refund);

            // 更新账户,记录退款流水
            ConfirmRefundVo refundVo = new ConfirmRefundVo();
            refundVo.setUserGuid(customerGuid);
            refundVo.setDataGuid(chargingGuid);
            refundVo.setSignGuid(refundParam.getSignGuid());
            accountService.refundThirdPay(refundVo);
        }
    }
}
